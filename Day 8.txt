
Q1) define your exception class by name "MyArithException"
(MyArithException.java)
define class "Calculator"   (Calculator.java)
In this class define a function,which will accept an int and return double of it.
e.g int caldouble(int)
This function will check an int which is passed to it
It will raise the  exception if 0 is passed or negative passed
in case of 0 caller of this method should get error message
"Zero not allowed" 
in case of negative caller of this method should get error message
"negative not allowed"
In case of positive value it should simply return the double value.
	[ this method shouldn't handle the exception]

Now define class "MyCalcApp" (MyCalcApp.java)
In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.ss

//Que1)

class MyArithException extends Exception
{
	MyArithException(String s)
	{
		super(s);
	}
}

//____________

public class Calculator
{
	int caldouble(int k) throws MyArithException
	{
		if(k==0)
	{
		throw new MyArithException("Zero not allowed");
	}
	
		else if(k<0)
	{
		throw new MyArithException("Negative not allowed");
	}
		return 2*k;
	}
}

//____________

import java.util.Scanner;

public class Demo
{
	public static void main(String[]args)
	{
		Calculator c = new Calculator();

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter a number");

		int num = sc.nextInt();

		int result=0;

		try
		{
			result = c.caldouble(num);
			System.out.println(result);
		}
		
		catch(MyArithException mess)
		{
		System.out.println(mess);
		}
	}
}

//______________________________________________________________________________________________
2) on the developer side create an exception:
	NumberNotDivisibleBySevenException
	as a checked exception

create necessary jar and documentation.

on client side
	public class MyMath class with 
		public void disp(int num)
this disp() method will check if the number passed is not divisible by 7 , it will raise
 "NumberNotDivisibleBySevenException" or else it will simply display the number passed.
	[ this method shouldn't handle the exception]

	public class Demo
		main function 
		invoke "disp()" of "MyMath" class.

//Que2)

/**
 * 
 */
package devpack;

public class NumberNotDivisibleBySevenException extends Exception
{
	public NumberNotDivisibleBySevenException(String ss)
	{
		super(ss);
	}
}

//_________________

package clientpack;

import devpack.NumberNotDivisibleBySevenException;

public class MyMath 
{
	public void disp(int num) throws NumberNotDivisibleBySevenException
	{
		if(num%7!=0)
		{
			throw new NumberNotDivisibleBySevenException("Number Not divisible By Seven");
		}
	}
}

//__________________

package clientpack;
import java.util.Scanner;

import devpack.NumberNotDivisibleBySevenException;


public class Demo {

	public static void main(String[] args) 
	{
		MyMath m = new MyMath();
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a Number");
		
		try
		{
			int num = sc.nextInt();
			m.disp(num);
			System.out.println("Nuber is Divisible by Seven");
		}
		
		catch(NumberNotDivisibleBySevenException a)
		{
			System.out.println(a);
		}
	}

}

//____________________________________________________________________________________________________
Que.3) define "MyException" as a checked exception.

define a class "Demo" with 
	public void show1(), public void show2() , public void show3() and main functions.

inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
	[ this method shouldn't handle the exception]

main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"

show2() should not handle the exception but show1() should handle.

//Que3)

package devpack;
import java.util.Scanner;

public class Demo 
{
	public void show3() throws MyException
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Entered Any Number");
		int num = sc.nextInt();
		
		if(num>10)
		{
			throw new MyException("Number is Greater than 10");
		}
	}
	public void show2() throws MyException
	{
		show3();
	}
	
	public void show1()
	{
		
		try 
		{
			show2();
			System.out.println("Entered Number is Lesser Than 10");
		}
		catch (MyException e) 
		{
			
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) 
	{
		Demo d =new Demo();
		
		d.show1();

	}

}

//___________________________________________________________________________________________________
Q4) on the developer side create following checked exception:
	InvalidLengthException
create necessary jar file and documentation.

on client side

public class Authenticator
	with
a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
	[ constructor shouldn't handle the exception]

create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.


//Que4)

package devpack;

public class InvalidLengthException extends Exception
{
	public InvalidLengthException(String ss)
	{
		super(ss);
	}
}

//_____________

package clientpack;

import devpack.InvalidLengthException;

public class Authenticator 
{
	public Authenticator(String ss) throws InvalidLengthException
	{
		if(ss.length()<5  || ss.length()>9)
		{
			throw new InvalidLengthException("InvalidLengthException");
		}
	}
	
	public void done()
	{
		System.out.println("successful authentication");
	}
}

//______________

package clientpack;
import devpack.InvalidLengthException;
public class Demo {

	public static void main(String[] args) 
	{
		
		try
		{
			Authenticator a = new Authenticator("Jishan@123");
			a.done();
		}
		
		catch(InvalidLengthException ae)
		{
			System.out.println(ae);
		}

	}
}

//__________________________________________________________________________________________________
5) on the developer side 
create checked exception "ResourceNotAllocatedException"

create a class:

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
		
	}
}

create necessary jar file and documentation

on the client side
public class Demo with main function

	inside main function, create object of "MyResource" and invoke "disp()" method.



//Que5)

package devpack;

public class ResourceNotAllocatedException extends Exception
{
	public  ResourceNotAllocatedException(String ss)
	{
		super(ss);
	}
}

//____________

package devpack;

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
	
	public void disp()
	    {
	    	System.out.println("successful");
	    }
	 
	 @Override
		public void close()  
	 {
			System.out.println("resource is closed");
			
	 }
}

//_______________

package clientpack;
import java.util.Scanner;
import devpack.*;

public class Demo {

	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		try
		{
			System.out.println("Enter Capacity");
			int capacity=sc.nextInt();
			
			MyResource m = new MyResource(capacity);
			
			 m.disp();
		}
		catch(ResourceNotAllocatedException ae)
		{
			System.out.println(ae);
		}

	}

}

//_________________________________________________________________________________________________