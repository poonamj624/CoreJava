//Que1)1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?


package pack1;

public class Parent 
{
	private int num=200;
	Parent()
	{
		System.out.println("Inside Parent Def Class Constructor");
	}
	Parent(int num)
	{
		System.out.println("Inside Parent Def Class Constructor\t"+num);
	}
}
class Child extends Parent
{
	private char ch='F';
	
	Child()
	{
		super(100);
		System.out.println("Inside Child class constructor");
	}
	void disp()
	{
		System.out.println(ch);
	}
}
public class Demo
{
	public static void main(String []args)
	{
	Child c = new Child();
	
	c.disp();
	}
}
_______________________________________________________________________________________________

//Que2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?

package pack1;

public class Vehicle 
{
	public void start()
	{
		System.out.println("Start the Vehicle");
	}
}
class FourWheeler extends Vehicle
{
	
	public void start()
	{
		System.out.println("Start the FourWheer");
	}
}
public class Demo
{
	public static void main(String []args)
	{
		FourWheeler f = new FourWheeler();
	
		f.start();
	}
}
//_______________________________________________________________________________________

//Que3)Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.


package pack1;

public class Parent 
{
	String ss;
	Parent()
	{
		System.out.println("Inside Parent class Def constructor");
	}
	Parent(String ss)
	{
		System.out.println("Inside Parent class Def constructor");
		this.ss=ss;
	}
	void disp()
	{
		System.out.println(ss);
	}
}
class Child1 extends Parent
{
	String ss;
	
	Child1()
	{
		this("Vijay");
		System.out.println("Inside Child1 class Def constructor");
	}
	Child1(String ss)
	{
		this.ss=ss;
		System.out.println("Inside Child1 class Param constructor");
	}
	void disp()
	{
		System.out.println(ss);
	}
}
class Child2 extends Parent
{
	String ss="Sethupati";
	
	Child2()
	{
		super("Welcome");
		System.out.println("Inside Child2 class Def constructor");
	}
	Child2(String ss)
	{
		this();
		System.out.println("Inside Child2 class Param constructor");
	}
	void disp()
	{
		System.out.println(ss);
	}
}
public class Demo
{
	public static void main(String []args)
	{
		Child1 c1 = new Child1();
		c1.disp();
		
		Child2 c2 = new Child2();
		c2.disp();
	}
}
//______________________________________________________________________________

//Que4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.


package pack1;

public class Top1
{
	void disp1()
	{
		System.out.println("Just display");
	}
}
class Bottom1 extends Top1
{
	void disp1()
	{
		System.out.println("Display inside Bottom1");
	}
}
class Bottom2 extends Top1
{
	void disp1()
	{
		System.out.println("Display inside Bottom2");
	}
}
class Bottom3 extends Top1
{
	void disp1()
	{
		System.out.println("Display inside Bottom3");
	}
}
public class Demo
{
	 static void display(Top1 ref)
	{
		ref.disp1();
	}
	public static void main(String []args)
	{
		display(new Bottom1());
		display(new Bottom2());
		display(new Bottom3());
	}
}
//_______________________________________________________________________________________

//Que5)create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.

package pack1;

abstract class Shape
{
	abstract void draw();
}
class Triangle extends Shape
{
	void draw()
	{
		System.out.println("Pls draw a Triangle");
	}
}
class Circle extends Shape
{
	void draw()
	{
		System.out.println("Pls draw a Circle");
	}
}
class Polygon extends Shape
{
	void draw()
	{
		System.out.println("Pls draw a Polygon");
	}
}
public class Demo
{
	public static void main(String []args)
	{
		Shape arr[]=new Shape[3];
		arr[0]=new Triangle();
		arr[1]=new Circle();
		arr[2]=new Polygon();
		
		for(int i=0;i<arr.length;i++)
		{
			arr[i].draw();
		}
	}
}
//______________________________________________________________________________________________

//Que6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.


package pack1;

interface A
{
	void disp1();
}

interface B extends A
{
	void disp2();
}

class C implements B
{
	public void disp1()
	{
		System.out.println("Inside disp1 method");
	}
	
	public void disp2()
	{
		System.out.println("Inside disp2 method");
	}
	
	void disp3()
	{
		System.out.println("Inside class C's own disp3 method");
	}
}
public class Demo
{
	public static void main(String []args)
	{
		C c = new C();
		
		c.disp1();
		c.disp2();
		c.disp3();
	}
}
//_______________________________________________________________________________________________

//Que7)Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.


package pack1;

public class Parent1
{
	private int num;
	
	Parent1()
	{
		System.out.println("Inside Parent1 Def constr");
	}

	public int getNum() 
	{
		return num;
	}

	public void setNum(int num) 
	{
		this.num = num;
	}
	
}

interface Parent2
{
	void disp2();
	int show();
}

class Child extends Parent1 implements Parent2
{
	void disp()
	{
		System.out.println("Inside class c's disp method");
	}
	
	public void disp2()
	{
		System.out.println("Inside interface Parent2's disp2 method ");
	}
	public int show()
	{
		return  100+200;
	}
}
public class Demo
{
	public static void main(String []args)
	{
		Child c = new Child();
		
		c.setNum(500);
		
		System.out.println(c.getNum());
		
		c.disp2();
		
		System.out.println(c.show());
		
		c.disp();
	}
}

//_____________________________________________________________________________________________

//Que8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.

package pack1;

public class Base1
{
	private int num;
	
	Base1(int num)
	{
		System.out.println("Inside Parent1 Def constr\t"+num);
	}
	
}

class Child1 extends Base1 
{
	char ch;
	String ss;
	
	Child1()
	{
		this('V');
		System.out.println("Inside Child's def constr");
	}
	
	Child1(char ch)
	{
		this('S',"Makkal_Selvan");
		this.ch=ch;
		System.out.println("Inside Child's One param constr");
	}
	
	Child1(char ch,String ss)
	{
		super(100);
		this.ch=ch;
		this.ss=ss;
		System.out.println("Inside Child's Two param const");
	}
	void disp()
	{
		System.out.println(ch+"\t"+ss);
	}
}
public class Demo
{
	public static void main(String []args)
	{
		Child1 c = new Child1();
		
		c.disp();
	}
}

//_______________________________________________________________________________________________________

//Que9)create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.



package pack1;

interface Game
{
	void play();
}

class Cricket implements Game
{
	public void play()
	{
		System.out.println("Let's play Cricket");
	}
}

class Football implements Game
{
	public void play()
	{
		System.out.println("Let's play Football");
	}
}

class Tennis implements Game
{
	public void play()
	{
		System.out.println("Let's play Tennis");
	}
}

//_____________________

package pack1;


public class Demo
{
	static void perform(Game ref)
	{
		ref.play();
	}
	public static void main(String []args)
	{
		perform(new Cricket());
		perform(new Football());
		perform(new Tennis());
	}
}

//_____________________________________________________________________________________________________________________________

